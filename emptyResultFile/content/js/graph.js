/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 441.0, "series": [{"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 2.0], [0.5, 2.0], [0.6, 2.0], [0.7, 2.0], [0.8, 2.0], [0.9, 2.0], [1.0, 2.0], [1.1, 2.0], [1.2, 2.0], [1.3, 2.0], [1.4, 2.0], [1.5, 2.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 3.0], [3.5, 3.0], [3.6, 3.0], [3.7, 3.0], [3.8, 3.0], [3.9, 3.0], [4.0, 3.0], [4.1, 3.0], [4.2, 3.0], [4.3, 3.0], [4.4, 3.0], [4.5, 3.0], [4.6, 3.0], [4.7, 3.0], [4.8, 3.0], [4.9, 3.0], [5.0, 3.0], [5.1, 3.0], [5.2, 3.0], [5.3, 3.0], [5.4, 3.0], [5.5, 3.0], [5.6, 3.0], [5.7, 3.0], [5.8, 3.0], [5.9, 3.0], [6.0, 3.0], [6.1, 4.0], [6.2, 4.0], [6.3, 4.0], [6.4, 4.0], [6.5, 4.0], [6.6, 4.0], [6.7, 4.0], [6.8, 4.0], [6.9, 4.0], [7.0, 4.0], [7.1, 4.0], [7.2, 4.0], [7.3, 4.0], [7.4, 4.0], [7.5, 4.0], [7.6, 4.0], [7.7, 5.0], [7.8, 5.0], [7.9, 5.0], [8.0, 5.0], [8.1, 5.0], [8.2, 5.0], [8.3, 6.0], [8.4, 6.0], [8.5, 6.0], [8.6, 6.0], [8.7, 6.0], [8.8, 7.0], [8.9, 7.0], [9.0, 7.0], [9.1, 7.0], [9.2, 7.0], [9.3, 7.0], [9.4, 8.0], [9.5, 8.0], [9.6, 8.0], [9.7, 8.0], [9.8, 9.0], [9.9, 9.0], [10.0, 9.0], [10.1, 10.0], [10.2, 10.0], [10.3, 10.0], [10.4, 11.0], [10.5, 11.0], [10.6, 11.0], [10.7, 12.0], [10.8, 12.0], [10.9, 12.0], [11.0, 13.0], [11.1, 14.0], [11.2, 14.0], [11.3, 14.0], [11.4, 15.0], [11.5, 16.0], [11.6, 17.0], [11.7, 17.0], [11.8, 17.0], [11.9, 18.0], [12.0, 18.0], [12.1, 18.0], [12.2, 18.0], [12.3, 19.0], [12.4, 19.0], [12.5, 19.0], [12.6, 20.0], [12.7, 20.0], [12.8, 20.0], [12.9, 21.0], [13.0, 21.0], [13.1, 22.0], [13.2, 22.0], [13.3, 22.0], [13.4, 23.0], [13.5, 23.0], [13.6, 24.0], [13.7, 24.0], [13.8, 25.0], [13.9, 25.0], [14.0, 25.0], [14.1, 25.0], [14.2, 26.0], [14.3, 26.0], [14.4, 26.0], [14.5, 26.0], [14.6, 27.0], [14.7, 27.0], [14.8, 27.0], [14.9, 28.0], [15.0, 28.0], [15.1, 28.0], [15.2, 29.0], [15.3, 29.0], [15.4, 29.0], [15.5, 29.0], [15.6, 30.0], [15.7, 30.0], [15.8, 31.0], [15.9, 31.0], [16.0, 31.0], [16.1, 31.0], [16.2, 32.0], [16.3, 32.0], [16.4, 32.0], [16.5, 33.0], [16.6, 33.0], [16.7, 33.0], [16.8, 34.0], [16.9, 34.0], [17.0, 34.0], [17.1, 35.0], [17.2, 35.0], [17.3, 35.0], [17.4, 35.0], [17.5, 36.0], [17.6, 36.0], [17.7, 36.0], [17.8, 37.0], [17.9, 37.0], [18.0, 38.0], [18.1, 38.0], [18.2, 39.0], [18.3, 39.0], [18.4, 40.0], [18.5, 41.0], [18.6, 41.0], [18.7, 42.0], [18.8, 42.0], [18.9, 43.0], [19.0, 43.0], [19.1, 44.0], [19.2, 45.0], [19.3, 45.0], [19.4, 45.0], [19.5, 46.0], [19.6, 47.0], [19.7, 47.0], [19.8, 47.0], [19.9, 47.0], [20.0, 48.0], [20.1, 48.0], [20.2, 48.0], [20.3, 49.0], [20.4, 49.0], [20.5, 50.0], [20.6, 50.0], [20.7, 50.0], [20.8, 51.0], [20.9, 51.0], [21.0, 51.0], [21.1, 51.0], [21.2, 51.0], [21.3, 52.0], [21.4, 52.0], [21.5, 52.0], [21.6, 52.0], [21.7, 52.0], [21.8, 53.0], [21.9, 53.0], [22.0, 53.0], [22.1, 54.0], [22.2, 54.0], [22.3, 54.0], [22.4, 55.0], [22.5, 55.0], [22.6, 55.0], [22.7, 56.0], [22.8, 56.0], [22.9, 57.0], [23.0, 57.0], [23.1, 57.0], [23.2, 58.0], [23.3, 58.0], [23.4, 59.0], [23.5, 59.0], [23.6, 59.0], [23.7, 59.0], [23.8, 60.0], [23.9, 60.0], [24.0, 61.0], [24.1, 61.0], [24.2, 61.0], [24.3, 62.0], [24.4, 62.0], [24.5, 63.0], [24.6, 63.0], [24.7, 63.0], [24.8, 64.0], [24.9, 64.0], [25.0, 65.0], [25.1, 65.0], [25.2, 66.0], [25.3, 67.0], [25.4, 67.0], [25.5, 68.0], [25.6, 68.0], [25.7, 69.0], [25.8, 69.0], [25.9, 69.0], [26.0, 70.0], [26.1, 70.0], [26.2, 70.0], [26.3, 71.0], [26.4, 71.0], [26.5, 71.0], [26.6, 71.0], [26.7, 72.0], [26.8, 72.0], [26.9, 72.0], [27.0, 72.0], [27.1, 73.0], [27.2, 73.0], [27.3, 73.0], [27.4, 73.0], [27.5, 73.0], [27.6, 73.0], [27.7, 74.0], [27.8, 74.0], [27.9, 74.0], [28.0, 74.0], [28.1, 74.0], [28.2, 74.0], [28.3, 75.0], [28.4, 75.0], [28.5, 75.0], [28.6, 75.0], [28.7, 75.0], [28.8, 76.0], [28.9, 76.0], [29.0, 76.0], [29.1, 76.0], [29.2, 76.0], [29.3, 76.0], [29.4, 77.0], [29.5, 77.0], [29.6, 77.0], [29.7, 77.0], [29.8, 77.0], [29.9, 77.0], [30.0, 77.0], [30.1, 78.0], [30.2, 78.0], [30.3, 78.0], [30.4, 78.0], [30.5, 78.0], [30.6, 78.0], [30.7, 78.0], [30.8, 79.0], [30.9, 79.0], [31.0, 79.0], [31.1, 79.0], [31.2, 79.0], [31.3, 79.0], [31.4, 80.0], [31.5, 80.0], [31.6, 80.0], [31.7, 80.0], [31.8, 80.0], [31.9, 80.0], [32.0, 81.0], [32.1, 81.0], [32.2, 81.0], [32.3, 81.0], [32.4, 81.0], [32.5, 81.0], [32.6, 82.0], [32.7, 82.0], [32.8, 82.0], [32.9, 82.0], [33.0, 82.0], [33.1, 83.0], [33.2, 83.0], [33.3, 83.0], [33.4, 83.0], [33.5, 83.0], [33.6, 84.0], [33.7, 84.0], [33.8, 84.0], [33.9, 84.0], [34.0, 84.0], [34.1, 84.0], [34.2, 84.0], [34.3, 84.0], [34.4, 85.0], [34.5, 85.0], [34.6, 85.0], [34.7, 85.0], [34.8, 85.0], [34.9, 85.0], [35.0, 86.0], [35.1, 86.0], [35.2, 86.0], [35.3, 86.0], [35.4, 86.0], [35.5, 87.0], [35.6, 87.0], [35.7, 87.0], [35.8, 87.0], [35.9, 87.0], [36.0, 87.0], [36.1, 88.0], [36.2, 88.0], [36.3, 88.0], [36.4, 88.0], [36.5, 88.0], [36.6, 88.0], [36.7, 88.0], [36.8, 88.0], [36.9, 89.0], [37.0, 89.0], [37.1, 89.0], [37.2, 89.0], [37.3, 89.0], [37.4, 89.0], [37.5, 89.0], [37.6, 89.0], [37.7, 90.0], [37.8, 90.0], [37.9, 90.0], [38.0, 90.0], [38.1, 90.0], [38.2, 90.0], [38.3, 91.0], [38.4, 91.0], [38.5, 91.0], [38.6, 91.0], [38.7, 91.0], [38.8, 91.0], [38.9, 92.0], [39.0, 92.0], [39.1, 92.0], [39.2, 92.0], [39.3, 92.0], [39.4, 92.0], [39.5, 93.0], [39.6, 93.0], [39.7, 93.0], [39.8, 93.0], [39.9, 93.0], [40.0, 94.0], [40.1, 94.0], [40.2, 94.0], [40.3, 94.0], [40.4, 94.0], [40.5, 94.0], [40.6, 95.0], [40.7, 95.0], [40.8, 95.0], [40.9, 95.0], [41.0, 95.0], [41.1, 95.0], [41.2, 96.0], [41.3, 96.0], [41.4, 96.0], [41.5, 96.0], [41.6, 96.0], [41.7, 96.0], [41.8, 96.0], [41.9, 96.0], [42.0, 97.0], [42.1, 97.0], [42.2, 97.0], [42.3, 97.0], [42.4, 97.0], [42.5, 97.0], [42.6, 98.0], [42.7, 98.0], [42.8, 98.0], [42.9, 98.0], [43.0, 98.0], [43.1, 98.0], [43.2, 99.0], [43.3, 99.0], [43.4, 99.0], [43.5, 99.0], [43.6, 100.0], [43.7, 100.0], [43.8, 100.0], [43.9, 100.0], [44.0, 101.0], [44.1, 101.0], [44.2, 101.0], [44.3, 101.0], [44.4, 101.0], [44.5, 101.0], [44.6, 102.0], [44.7, 102.0], [44.8, 103.0], [44.9, 103.0], [45.0, 104.0], [45.1, 104.0], [45.2, 105.0], [45.3, 105.0], [45.4, 105.0], [45.5, 106.0], [45.6, 106.0], [45.7, 107.0], [45.8, 107.0], [45.9, 108.0], [46.0, 108.0], [46.1, 109.0], [46.2, 109.0], [46.3, 110.0], [46.4, 110.0], [46.5, 111.0], [46.6, 111.0], [46.7, 111.0], [46.8, 112.0], [46.9, 112.0], [47.0, 113.0], [47.1, 113.0], [47.2, 113.0], [47.3, 113.0], [47.4, 114.0], [47.5, 114.0], [47.6, 114.0], [47.7, 115.0], [47.8, 115.0], [47.9, 115.0], [48.0, 115.0], [48.1, 115.0], [48.2, 116.0], [48.3, 116.0], [48.4, 116.0], [48.5, 116.0], [48.6, 116.0], [48.7, 116.0], [48.8, 116.0], [48.9, 117.0], [49.0, 117.0], [49.1, 117.0], [49.2, 117.0], [49.3, 117.0], [49.4, 117.0], [49.5, 117.0], [49.6, 118.0], [49.7, 118.0], [49.8, 118.0], [49.9, 118.0], [50.0, 118.0], [50.1, 118.0], [50.2, 119.0], [50.3, 119.0], [50.4, 119.0], [50.5, 120.0], [50.6, 120.0], [50.7, 120.0], [50.8, 120.0], [50.9, 121.0], [51.0, 121.0], [51.1, 121.0], [51.2, 122.0], [51.3, 122.0], [51.4, 122.0], [51.5, 123.0], [51.6, 123.0], [51.7, 123.0], [51.8, 123.0], [51.9, 124.0], [52.0, 124.0], [52.1, 124.0], [52.2, 125.0], [52.3, 125.0], [52.4, 125.0], [52.5, 126.0], [52.6, 127.0], [52.7, 127.0], [52.8, 127.0], [52.9, 128.0], [53.0, 128.0], [53.1, 128.0], [53.2, 129.0], [53.3, 129.0], [53.4, 130.0], [53.5, 130.0], [53.6, 131.0], [53.7, 131.0], [53.8, 132.0], [53.9, 133.0], [54.0, 133.0], [54.1, 133.0], [54.2, 133.0], [54.3, 134.0], [54.4, 134.0], [54.5, 134.0], [54.6, 135.0], [54.7, 135.0], [54.8, 135.0], [54.9, 135.0], [55.0, 136.0], [55.1, 136.0], [55.2, 136.0], [55.3, 137.0], [55.4, 137.0], [55.5, 137.0], [55.6, 137.0], [55.7, 137.0], [55.8, 138.0], [55.9, 138.0], [56.0, 138.0], [56.1, 138.0], [56.2, 138.0], [56.3, 138.0], [56.4, 139.0], [56.5, 139.0], [56.6, 139.0], [56.7, 140.0], [56.8, 140.0], [56.9, 140.0], [57.0, 140.0], [57.1, 140.0], [57.2, 140.0], [57.3, 140.0], [57.4, 140.0], [57.5, 141.0], [57.6, 141.0], [57.7, 141.0], [57.8, 141.0], [57.9, 141.0], [58.0, 142.0], [58.1, 142.0], [58.2, 142.0], [58.3, 142.0], [58.4, 142.0], [58.5, 142.0], [58.6, 142.0], [58.7, 143.0], [58.8, 143.0], [58.9, 143.0], [59.0, 143.0], [59.1, 143.0], [59.2, 144.0], [59.3, 144.0], [59.4, 144.0], [59.5, 144.0], [59.6, 144.0], [59.7, 145.0], [59.8, 145.0], [59.9, 145.0], [60.0, 145.0], [60.1, 145.0], [60.2, 145.0], [60.3, 146.0], [60.4, 146.0], [60.5, 146.0], [60.6, 146.0], [60.7, 146.0], [60.8, 147.0], [60.9, 147.0], [61.0, 147.0], [61.1, 147.0], [61.2, 147.0], [61.3, 147.0], [61.4, 147.0], [61.5, 148.0], [61.6, 148.0], [61.7, 148.0], [61.8, 148.0], [61.9, 148.0], [62.0, 149.0], [62.1, 149.0], [62.2, 149.0], [62.3, 149.0], [62.4, 150.0], [62.5, 150.0], [62.6, 150.0], [62.7, 150.0], [62.8, 151.0], [62.9, 151.0], [63.0, 151.0], [63.1, 151.0], [63.2, 151.0], [63.3, 151.0], [63.4, 151.0], [63.5, 151.0], [63.6, 152.0], [63.7, 152.0], [63.8, 152.0], [63.9, 152.0], [64.0, 153.0], [64.1, 153.0], [64.2, 153.0], [64.3, 153.0], [64.4, 154.0], [64.5, 154.0], [64.6, 154.0], [64.7, 154.0], [64.8, 154.0], [64.9, 155.0], [65.0, 155.0], [65.1, 155.0], [65.2, 156.0], [65.3, 156.0], [65.4, 156.0], [65.5, 156.0], [65.6, 156.0], [65.7, 157.0], [65.8, 157.0], [65.9, 157.0], [66.0, 157.0], [66.1, 158.0], [66.2, 158.0], [66.3, 158.0], [66.4, 158.0], [66.5, 158.0], [66.6, 159.0], [66.7, 159.0], [66.8, 159.0], [66.9, 159.0], [67.0, 159.0], [67.1, 159.0], [67.2, 159.0], [67.3, 160.0], [67.4, 160.0], [67.5, 160.0], [67.6, 160.0], [67.7, 161.0], [67.8, 161.0], [67.9, 161.0], [68.0, 162.0], [68.1, 162.0], [68.2, 162.0], [68.3, 163.0], [68.4, 163.0], [68.5, 164.0], [68.6, 164.0], [68.7, 165.0], [68.8, 165.0], [68.9, 165.0], [69.0, 166.0], [69.1, 166.0], [69.2, 166.0], [69.3, 166.0], [69.4, 167.0], [69.5, 167.0], [69.6, 167.0], [69.7, 167.0], [69.8, 168.0], [69.9, 168.0], [70.0, 168.0], [70.1, 168.0], [70.2, 168.0], [70.3, 169.0], [70.4, 169.0], [70.5, 169.0], [70.6, 169.0], [70.7, 170.0], [70.8, 170.0], [70.9, 170.0], [71.0, 170.0], [71.1, 171.0], [71.2, 171.0], [71.3, 172.0], [71.4, 172.0], [71.5, 172.0], [71.6, 173.0], [71.7, 173.0], [71.8, 173.0], [71.9, 173.0], [72.0, 174.0], [72.1, 174.0], [72.2, 174.0], [72.3, 175.0], [72.4, 175.0], [72.5, 175.0], [72.6, 175.0], [72.7, 175.0], [72.8, 175.0], [72.9, 175.0], [73.0, 176.0], [73.1, 176.0], [73.2, 176.0], [73.3, 176.0], [73.4, 176.0], [73.5, 177.0], [73.6, 177.0], [73.7, 177.0], [73.8, 177.0], [73.9, 177.0], [74.0, 177.0], [74.1, 178.0], [74.2, 178.0], [74.3, 178.0], [74.4, 178.0], [74.5, 178.0], [74.6, 179.0], [74.7, 179.0], [74.8, 179.0], [74.9, 179.0], [75.0, 180.0], [75.1, 180.0], [75.2, 180.0], [75.3, 180.0], [75.4, 180.0], [75.5, 180.0], [75.6, 181.0], [75.7, 181.0], [75.8, 181.0], [75.9, 181.0], [76.0, 181.0], [76.1, 182.0], [76.2, 182.0], [76.3, 182.0], [76.4, 182.0], [76.5, 182.0], [76.6, 182.0], [76.7, 183.0], [76.8, 183.0], [76.9, 183.0], [77.0, 183.0], [77.1, 183.0], [77.2, 183.0], [77.3, 184.0], [77.4, 184.0], [77.5, 184.0], [77.6, 184.0], [77.7, 184.0], [77.8, 185.0], [77.9, 185.0], [78.0, 185.0], [78.1, 185.0], [78.2, 186.0], [78.3, 186.0], [78.4, 186.0], [78.5, 186.0], [78.6, 186.0], [78.7, 187.0], [78.8, 187.0], [78.9, 187.0], [79.0, 187.0], [79.1, 187.0], [79.2, 188.0], [79.3, 188.0], [79.4, 188.0], [79.5, 188.0], [79.6, 189.0], [79.7, 189.0], [79.8, 189.0], [79.9, 190.0], [80.0, 190.0], [80.1, 190.0], [80.2, 190.0], [80.3, 190.0], [80.4, 191.0], [80.5, 191.0], [80.6, 191.0], [80.7, 191.0], [80.8, 191.0], [80.9, 192.0], [81.0, 192.0], [81.1, 193.0], [81.2, 193.0], [81.3, 193.0], [81.4, 194.0], [81.5, 195.0], [81.6, 195.0], [81.7, 196.0], [81.8, 197.0], [81.9, 197.0], [82.0, 198.0], [82.1, 198.0], [82.2, 199.0], [82.3, 199.0], [82.4, 199.0], [82.5, 199.0], [82.6, 200.0], [82.7, 200.0], [82.8, 200.0], [82.9, 201.0], [83.0, 201.0], [83.1, 202.0], [83.2, 202.0], [83.3, 203.0], [83.4, 203.0], [83.5, 204.0], [83.6, 205.0], [83.7, 205.0], [83.8, 206.0], [83.9, 207.0], [84.0, 207.0], [84.1, 207.0], [84.2, 208.0], [84.3, 208.0], [84.4, 208.0], [84.5, 209.0], [84.6, 209.0], [84.7, 209.0], [84.8, 210.0], [84.9, 210.0], [85.0, 210.0], [85.1, 210.0], [85.2, 210.0], [85.3, 210.0], [85.4, 210.0], [85.5, 211.0], [85.6, 211.0], [85.7, 211.0], [85.8, 212.0], [85.9, 212.0], [86.0, 212.0], [86.1, 212.0], [86.2, 212.0], [86.3, 213.0], [86.4, 213.0], [86.5, 214.0], [86.6, 214.0], [86.7, 214.0], [86.8, 215.0], [86.9, 215.0], [87.0, 215.0], [87.1, 216.0], [87.2, 216.0], [87.3, 216.0], [87.4, 216.0], [87.5, 217.0], [87.6, 217.0], [87.7, 217.0], [87.8, 218.0], [87.9, 218.0], [88.0, 219.0], [88.1, 219.0], [88.2, 219.0], [88.3, 219.0], [88.4, 220.0], [88.5, 220.0], [88.6, 221.0], [88.7, 222.0], [88.8, 222.0], [88.9, 223.0], [89.0, 224.0], [89.1, 224.0], [89.2, 225.0], [89.3, 226.0], [89.4, 226.0], [89.5, 226.0], [89.6, 227.0], [89.7, 228.0], [89.8, 229.0], [89.9, 230.0], [90.0, 230.0], [90.1, 231.0], [90.2, 232.0], [90.3, 233.0], [90.4, 233.0], [90.5, 233.0], [90.6, 234.0], [90.7, 236.0], [90.8, 237.0], [90.9, 238.0], [91.0, 239.0], [91.1, 242.0], [91.2, 243.0], [91.3, 244.0], [91.4, 244.0], [91.5, 245.0], [91.6, 246.0], [91.7, 246.0], [91.8, 247.0], [91.9, 247.0], [92.0, 248.0], [92.1, 249.0], [92.2, 250.0], [92.3, 252.0], [92.4, 253.0], [92.5, 253.0], [92.6, 254.0], [92.7, 255.0], [92.8, 255.0], [92.9, 257.0], [93.0, 257.0], [93.1, 258.0], [93.2, 259.0], [93.3, 259.0], [93.4, 260.0], [93.5, 260.0], [93.6, 260.0], [93.7, 260.0], [93.8, 260.0], [93.9, 261.0], [94.0, 261.0], [94.1, 261.0], [94.2, 261.0], [94.3, 262.0], [94.4, 263.0], [94.5, 263.0], [94.6, 264.0], [94.7, 265.0], [94.8, 265.0], [94.9, 266.0], [95.0, 267.0], [95.1, 267.0], [95.2, 268.0], [95.3, 268.0], [95.4, 268.0], [95.5, 269.0], [95.6, 269.0], [95.7, 270.0], [95.8, 270.0], [95.9, 272.0], [96.0, 273.0], [96.1, 274.0], [96.2, 276.0], [96.3, 277.0], [96.4, 279.0], [96.5, 280.0], [96.6, 282.0], [96.7, 283.0], [96.8, 284.0], [96.9, 286.0], [97.0, 287.0], [97.1, 288.0], [97.2, 288.0], [97.3, 290.0], [97.4, 292.0], [97.5, 293.0], [97.6, 295.0], [97.7, 296.0], [97.8, 297.0], [97.9, 298.0], [98.0, 299.0], [98.1, 300.0], [98.2, 303.0], [98.3, 304.0], [98.4, 306.0], [98.5, 309.0], [98.6, 311.0], [98.7, 314.0], [98.8, 317.0], [98.9, 320.0], [99.0, 326.0], [99.1, 328.0], [99.2, 334.0], [99.3, 342.0], [99.4, 345.0], [99.5, 348.0], [99.6, 356.0], [99.7, 359.0], [99.8, 370.0], [99.9, 385.0], [100.0, 441.0]], "isOverall": false, "label": "HTTP 요청", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 2178.0, "series": [{"data": [[0.0, 2178.0], [300.0, 97.0], [100.0, 1950.0], [200.0, 773.0], [400.0, 2.0]], "isOverall": false, "label": "HTTP 요청", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5000.0, "minX": 0.0, "ticks": [[0, "요청 수 \n(응답시간 <= 500ms)"], [1, "요청 수 \n(응답시간 > 500ms 및 <= 1,500ms)"], [2, "요청 수 \n(응답시간 > 1,500ms)"], [3, "오류 발생 요청"]], "maxY": 5000.0, "series": [{"data": [[0.0, 5000.0]], "color": "#9ACD32", "isOverall": false, "label": "요청 수 \n(응답시간 <= 500ms)", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "요청 수 \n(응답시간 > 500ms 및 <= 1,500ms)", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "요청 수 \n(응답시간 > 1,500ms)", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "오류 발생 요청", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 4.9E-324, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 313.5111999999994, "minX": 1.7204931E12, "maxY": 313.5111999999994, "series": [{"data": [[1.7204931E12, 313.5111999999994]], "isOverall": false, "label": "쓰레드 그룹", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7204931E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 284.0, "series": [{"data": [[2.0, 8.333333333333334], [4.0, 4.0], [6.0, 9.25], [7.0, 6.0], [8.0, 8.666666666666666], [9.0, 8.0], [10.0, 9.333333333333332], [11.0, 4.0], [12.0, 4.6], [13.0, 3.0], [14.0, 12.333333333333334], [15.0, 7.0], [16.0, 16.0], [17.0, 12.428571428571427], [18.0, 12.333333333333334], [19.0, 5.666666666666667], [20.0, 11.666666666666666], [21.0, 16.428571428571427], [22.0, 8.0], [23.0, 14.142857142857142], [24.0, 8.5], [25.0, 16.0], [26.0, 13.75], [27.0, 12.666666666666666], [28.0, 13.125], [29.0, 10.0], [30.0, 3.6666666666666665], [31.0, 19.4], [32.0, 27.25], [33.0, 3.0], [34.0, 9.0], [35.0, 23.333333333333336], [36.0, 13.375], [37.0, 36.75], [38.0, 35.666666666666664], [39.0, 7.0], [40.0, 27.0], [41.0, 25.27272727272727], [42.0, 17.571428571428573], [43.0, 31.6], [44.0, 2.0], [45.0, 20.5], [46.0, 42.99999999999999], [47.0, 21.80952380952381], [49.0, 23.75], [50.0, 22.6], [51.0, 15.5], [52.0, 20.333333333333336], [53.0, 25.166666666666668], [54.0, 29.25], [55.0, 28.0], [56.0, 24.82352941176471], [57.0, 34.0], [58.0, 10.0], [59.0, 20.0], [60.0, 4.5], [61.0, 32.0], [62.0, 25.666666666666668], [63.0, 29.099999999999994], [64.0, 39.25], [65.0, 20.0], [66.0, 22.6], [67.0, 17.8], [68.0, 16.5], [69.0, 61.625], [70.0, 10.333333333333332], [71.0, 4.0], [72.0, 2.75], [73.0, 44.44444444444444], [74.0, 41.0], [75.0, 30.777777777777782], [77.0, 20.5], [78.0, 31.0], [79.0, 38.083333333333336], [76.0, 16.5], [81.0, 22.428571428571427], [82.0, 26.5], [83.0, 33.5], [80.0, 41.0], [84.0, 3.0], [85.0, 41.44444444444444], [86.0, 10.5], [87.0, 64.4], [88.0, 58.666666666666664], [89.0, 8.5], [91.0, 53.8], [92.0, 53.75], [94.0, 4.0], [95.0, 14.75], [93.0, 95.37499999999999], [96.0, 61.333333333333336], [97.0, 40.0], [99.0, 49.5], [98.0, 49.0], [100.0, 36.0], [101.0, 35.0], [102.0, 50.33333333333333], [103.0, 51.5], [104.0, 70.16666666666666], [105.0, 39.333333333333336], [106.0, 49.5], [107.0, 86.33333333333333], [108.0, 54.5], [109.0, 26.75], [110.0, 5.666666666666667], [111.0, 64.2], [112.0, 4.0], [114.0, 38.75], [115.0, 33.6], [113.0, 76.0], [116.0, 3.0], [117.0, 54.75], [118.0, 3.5], [119.0, 2.5], [120.0, 58.428571428571416], [122.0, 98.0], [123.0, 86.7], [121.0, 51.0], [124.0, 114.2], [125.0, 69.2], [126.0, 56.14285714285714], [127.0, 57.0], [129.0, 60.333333333333336], [130.0, 65.88888888888889], [132.0, 106.8], [133.0, 70.7], [134.0, 62.6], [135.0, 37.92857142857142], [131.0, 76.33333333333333], [128.0, 101.42857142857142], [136.0, 69.0], [137.0, 90.33333333333333], [138.0, 61.0], [139.0, 4.0], [140.0, 63.63636363636363], [142.0, 35.666666666666664], [143.0, 67.66666666666667], [141.0, 77.0], [144.0, 118.75], [145.0, 68.75], [146.0, 15.5], [147.0, 27.5], [149.0, 68.26315789473685], [150.0, 44.0], [151.0, 77.0], [148.0, 39.5], [152.0, 88.2], [153.0, 69.39999999999999], [155.0, 63.28571428571428], [156.0, 25.400000000000002], [158.0, 80.8], [159.0, 45.2], [157.0, 63.333333333333336], [154.0, 85.39999999999999], [160.0, 2.3333333333333335], [161.0, 86.0], [167.0, 36.0], [165.0, 53.0], [163.0, 84.33333333333333], [162.0, 180.0], [175.0, 2.0], [174.0, 134.66666666666666], [173.0, 104.25], [172.0, 162.66666666666666], [171.0, 59.5], [169.0, 26.0], [168.0, 51.5], [176.0, 71.72727272727273], [178.0, 79.0], [179.0, 150.00000000000003], [180.0, 66.83333333333334], [181.0, 102.375], [182.0, 110.66666666666667], [183.0, 47.0], [177.0, 52.5], [184.0, 75.875], [185.0, 61.5], [186.0, 49.125], [187.0, 126.85714285714286], [188.0, 50.666666666666664], [189.0, 70.72727272727273], [190.0, 81.85714285714286], [191.0, 82.16666666666667], [192.0, 54.8], [193.0, 80.96296296296296], [199.0, 156.5], [198.0, 150.66666666666666], [196.0, 143.25000000000006], [195.0, 86.33333333333333], [197.0, 123.0], [204.0, 105.0], [202.0, 94.6], [201.0, 81.35294117647058], [200.0, 106.2], [205.0, 100.58333333333334], [206.0, 60.92857142857143], [207.0, 20.0], [203.0, 57.0], [208.0, 54.3], [209.0, 85.35714285714285], [212.0, 92.4], [213.0, 78.84615384615384], [214.0, 119.77777777777777], [215.0, 105.28571428571428], [211.0, 122.99999999999999], [216.0, 72.73333333333333], [218.0, 94.66666666666667], [219.0, 70.83333333333333], [220.0, 68.90909090909092], [221.0, 82.58823529411765], [222.0, 150.72727272727272], [223.0, 192.33333333333331], [224.0, 112.14285714285715], [225.0, 58.714285714285715], [226.0, 33.25], [227.0, 35.75], [229.0, 284.0], [230.0, 157.92307692307693], [231.0, 118.05263157894736], [228.0, 94.0], [232.0, 100.50000000000001], [233.0, 61.4], [234.0, 33.0], [235.0, 118.42857142857143], [236.0, 49.7], [237.0, 49.25], [238.0, 54.0], [239.0, 42.4], [241.0, 86.0], [242.0, 85.33333333333333], [243.0, 55.333333333333336], [244.0, 72.75], [245.0, 113.11111111111111], [246.0, 82.07692307692308], [247.0, 102.16666666666667], [240.0, 81.5], [248.0, 116.46666666666668], [250.0, 81.0], [251.0, 98.28571428571428], [252.0, 98.5], [253.0, 77.07142857142857], [254.0, 107.23809523809526], [255.0, 137.33333333333334], [249.0, 57.99999999999999], [257.0, 81.22222222222223], [256.0, 144.86666666666665], [259.0, 141.0], [258.0, 109.5], [268.0, 118.11111111111111], [269.0, 132.52631578947367], [270.0, 79.71428571428571], [271.0, 109.33333333333333], [260.0, 143.10000000000002], [261.0, 50.5], [262.0, 177.0], [263.0, 84.33333333333333], [264.0, 103.5], [265.0, 80.00000000000001], [266.0, 127.5], [267.0, 78.10000000000001], [272.0, 66.625], [275.0, 171.8], [274.0, 94.25], [273.0, 120.4], [284.0, 138.0], [285.0, 82.66666666666666], [286.0, 114.59999999999998], [287.0, 120.69230769230771], [276.0, 169.00000000000003], [277.0, 129.75862068965517], [278.0, 109.88888888888889], [279.0, 114.00000000000001], [280.0, 101.99999999999999], [281.0, 123.57142857142858], [282.0, 77.3], [283.0, 122.77777777777777], [288.0, 140.125], [290.0, 68.33333333333333], [300.0, 89.0], [301.0, 163.875], [303.0, 203.0], [292.0, 229.0], [293.0, 97.0], [294.0, 82.1111111111111], [295.0, 115.0], [296.0, 137.75], [297.0, 138.66666666666666], [298.0, 85.0], [299.0, 46.5], [305.0, 111.6], [304.0, 100.25], [306.0, 102.33333333333333], [317.0, 256.0], [318.0, 119.33333333333333], [319.0, 152.55978260869554], [308.0, 147.4], [310.0, 63.75], [311.0, 158.33333333333334], [312.0, 112.33333333333333], [313.0, 63.0], [314.0, 107.4], [315.0, 143.0], [321.0, 140.46153846153848], [320.0, 197.23529411764707], [322.0, 148.5], [323.0, 157.66666666666666], [324.0, 155.36363636363637], [325.0, 146.2], [326.0, 128.33333333333334], [327.0, 184.0], [328.0, 164.9090909090909], [334.0, 235.0], [333.0, 147.8], [332.0, 181.8], [335.0, 212.91666666666666], [329.0, 157.16666666666669], [331.0, 256.0], [330.0, 94.0], [336.0, 153.37500000000006], [340.0, 146.84615384615384], [341.0, 160.26086956521738], [343.0, 185.39999999999998], [342.0, 66.33333333333333], [344.0, 151.90476190476193], [350.0, 151.57142857142858], [351.0, 132.77777777777777], [345.0, 148.7142857142857], [346.0, 168.76923076923077], [347.0, 143.75], [348.0, 163.625], [339.0, 126.875], [338.0, 153.0], [349.0, 130.66666666666669], [353.0, 177.93333333333334], [352.0, 152.28571428571428], [354.0, 183.1428571428571], [355.0, 147.49019607843135], [356.0, 128.78947368421052], [357.0, 112.375], [358.0, 117.75], [359.0, 123.4], [361.0, 161.39999999999998], [360.0, 159.41666666666669], [366.0, 169.58333333333334], [367.0, 112.66666666666667], [364.0, 157.30303030303034], [365.0, 159.125], [362.0, 162.2], [363.0, 157.66666666666666], [382.0, 143.0555555555556], [369.0, 190.75], [368.0, 136.45454545454544], [371.0, 148.11111111111111], [370.0, 185.11764705882356], [375.0, 140.7], [374.0, 160.4210526315789], [373.0, 157.94117647058823], [372.0, 77.0], [383.0, 133.54999999999995], [381.0, 151.1111111111111], [380.0, 119.0], [379.0, 172.1904761904762], [378.0, 171.66666666666666], [377.0, 155.42499999999998], [376.0, 73.0], [392.0, 141.3529411764706], [395.0, 149.20000000000005], [394.0, 175.77777777777777], [393.0, 176.06666666666666], [391.0, 154.11764705882356], [384.0, 141.66666666666666], [390.0, 152.54545454545456], [389.0, 148.07692307692307], [388.0, 125.14285714285714], [387.0, 136.77777777777777], [396.0, 131.38235294117646], [397.0, 170.0], [398.0, 158.99999999999997], [399.0, 136.56666666666666], [386.0, 108.55555555555556], [401.0, 176.76], [400.0, 107.14285714285714], [402.0, 157.02631578947373], [403.0, 136.74999999999997], [405.0, 136.12727272727273], [406.0, 125.90909090909092], [407.0, 139.99999999999997], [408.0, 141.47368421052633], [414.0, 128.57142857142856], [415.0, 177.00000000000003], [412.0, 138.13888888888889], [413.0, 124.41176470588233], [409.0, 129.0263157894737], [410.0, 133.55555555555554], [411.0, 124.57142857142858], [418.0, 164.0], [416.0, 131.11904761904765], [417.0, 148.6875], [419.0, 173.3181818181818], [428.0, 148.38000000000002], [429.0, 159.61538461538464], [430.0, 141.20370370370367], [431.0, 157.66666666666669], [420.0, 269.5], [421.0, 118.4], [422.0, 202.6], [423.0, 151.25], [424.0, 3.0], [425.0, 193.2], [426.0, 111.4], [427.0, 154.1244239631336], [433.0, 134.82758620689654], [432.0, 128.13636363636363], [434.0, 122.3], [435.0, 122.75], [436.0, 160.72222222222229], [437.0, 149.65151515151513], [438.0, 163.69565217391306], [439.0, 174.3333333333333], [440.0, 170.0], [446.0, 179.11111111111111], [447.0, 174.4343434343434], [444.0, 132.12499999999997], [445.0, 164.03703703703707], [441.0, 144.38235294117646], [442.0, 145.52173913043478], [443.0, 169.9344262295082], [448.0, 180.02173913043472], [449.0, 180.76000000000002], [450.0, 158.5], [451.0, 204.73333333333335], [452.0, 159.33333333333337], [453.0, 182.2545454545455], [1.0, 2.0]], "isOverall": false, "label": "HTTP 요청", "isController": false}, {"data": [[313.5111999999994, 123.98000000000025]], "isOverall": false, "label": "HTTP 요청-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 453.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11000.0, "minX": 1.7204931E12, "maxY": 49833.333333333336, "series": [{"data": [[1.7204931E12, 49833.333333333336]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7204931E12, 11000.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7204931E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 123.98000000000025, "minX": 1.7204931E12, "maxY": 123.98000000000025, "series": [{"data": [[1.7204931E12, 123.98000000000025]], "isOverall": false, "label": "HTTP 요청", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7204931E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 92.43339999999979, "minX": 1.7204931E12, "maxY": 92.43339999999979, "series": [{"data": [[1.7204931E12, 92.43339999999979]], "isOverall": false, "label": "HTTP 요청", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7204931E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.05640000000000016, "minX": 1.7204931E12, "maxY": 0.05640000000000016, "series": [{"data": [[1.7204931E12, 0.05640000000000016]], "isOverall": false, "label": "HTTP 요청", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7204931E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.7204931E12, "maxY": 441.0, "series": [{"data": [[1.7204931E12, 441.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7204931E12, 230.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7204931E12, 326.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7204931E12, 267.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7204931E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7204931E12, 118.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7204931E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 16.0, "minX": 484.0, "maxY": 146.5, "series": [{"data": [[2186.0, 118.0], [2330.0, 146.5], [484.0, 16.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2330.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 6.0, "minX": 484.0, "maxY": 98.5, "series": [{"data": [[2186.0, 83.0], [2330.0, 98.5], [484.0, 6.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2330.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.7204931E12, "maxY": 83.33333333333333, "series": [{"data": [[1.7204931E12, 83.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7204931E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.7204931E12, "maxY": 83.33333333333333, "series": [{"data": [[1.7204931E12, 83.33333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7204931E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.7204931E12, "maxY": 83.33333333333333, "series": [{"data": [[1.7204931E12, 83.33333333333333]], "isOverall": false, "label": "HTTP 요청-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7204931E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.7204931E12, "maxY": 83.33333333333333, "series": [{"data": [[1.7204931E12, 83.33333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7204931E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

